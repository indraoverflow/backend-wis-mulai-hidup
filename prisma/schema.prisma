// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum gender {
  male
  female
}

model user {
  id                 BigInt              @id @default(autoincrement())
  name               String?             @db.VarChar(50)
  email              String              @unique @db.VarChar(50)
  password           String?             @db.Text
  phone_number       String?             @unique @db.VarChar(13)
  gender             gender?
  refresh_token      String?             @db.Text
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  role_id            BigInt?
  role               role?               @relation(fields: [role_id], references: [id], onDelete: SetNull)
  subscription       subscription?
  wedding_receptions wedding_reception[]

  @@index([id, created_at, role_id, email])
}

model role {
  id         BigInt   @id @default(autoincrement())
  role_name  String   @db.VarChar(10)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      user[]

  @@index([id, created_at])
}

enum wedding_status {
  scheduled
  in_progress
  postponed
  completed
  cancelled
}

enum time_zone {
  WIB
  WITA
  WIT
}

model wedding_reception {
  id                BigInt              @id @default(autoincrement())
  title_reception   String              @db.VarChar(50)
  name_man          String              @db.VarChar(50)
  nickname_man      String              @db.VarChar(50)
  prefix_man        String              @db.VarChar(50)
  title_man         String              @db.VarChar(50)
  birthdate_man     DateTime
  father_man        String              @db.VarChar(50)
  mother_man        String              @db.VarChar(50)
  description_man   String              @db.VarChar(255)
  prefix_woman      String              @db.VarChar(50)
  name_woman        String              @db.VarChar(50)
  nickname_woman    String              @db.VarChar(50)
  title_woman       String              @db.VarChar(50)
  birthdate_woman   DateTime
  father_woman      String              @db.VarChar(50)
  mother_woman      String              @db.VarChar(50)
  description_woman String              @db.VarChar(255)
  start_date        DateTime
  end_date          DateTime
  start_time        String
  end_time          String
  time_zone         time_zone
  location          String              @db.VarChar(100)
  address           String              @db.VarChar(255)
  user_id           BigInt?
  bride_groom_media bride_groom_media[]
  wedding_status    wedding_status
  wedding_ceremony  wedding_ceremony?
  user              user?               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account_bank      account_bank[]
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  theme_id          BigInt
  theme             theme               @relation(fields: [theme_id], references: [id], onDelete: Cascade)
  wedding_media     wedding_media[]

  @@index([id, user_id, created_at])
}

model account_bank {
  id                   BigInt            @id @default(autoincrement())
  name                 String            @db.VarChar(255)
  number               String            @db.VarChar(100)
  bank                 String            @db.VarChar(255)
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  wedding_reception_id BigInt            @unique
  wedding_reception    wedding_reception @relation(fields: [wedding_reception_id], references: [id], onDelete: Cascade)
}

model wedding_ceremony {
  id                   BigInt            @id @default(autoincrement())
  title_ceremony       String            @db.VarChar(50)
  start_date           DateTime
  end_date             DateTime
  start_time           String
  end_time             String
  location             String            @db.VarChar(100)
  address              String            @db.VarChar(255)
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  wedding_reception_id BigInt            @unique
  wedding_reception    wedding_reception @relation(fields: [wedding_reception_id], references: [id], onDelete: Cascade)

  @@index([id, created_at])
}

model theme {
  id                 BigInt              @id @default(autoincrement())
  theme_name         String              @unique @db.VarChar(50)
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  wedding_receptions wedding_reception[]

  @@index([id, created_at])
}

model wedding_media {
  id                   BigInt             @id @default(autoincrement())
  photo_url            String             @db.VarChar(255)
  wedding_reception_id BigInt?
  wedding_reception    wedding_reception? @relation(fields: [wedding_reception_id], references: [id], onDelete: Cascade)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt

  @@index([id, wedding_reception_id, created_at])
}

enum media_owner {
  man
  woman
}

model bride_groom_media {
  id                   BigInt             @id @default(autoincrement())
  photo_url            String             @db.VarChar(255)
  wedding_reception_id BigInt?
  wedding_reception    wedding_reception? @relation(fields: [wedding_reception_id], references: [id], onDelete: Cascade)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  media_owner          media_owner

  @@index([id, wedding_reception_id, created_at])
}

model invitation {
  id                   BigInt   @id @default(autoincrement())
  name                 String   @db.VarChar(255)
  phone_number         String   @db.VarChar(255)
  wedding_reception_id BigInt?
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@index([id, wedding_reception_id, created_at])
}

enum expired_status {
  ON_PROCESS
  EXPIRED
  ACTIVE
  SUSPEND
}


model subscription {
  id                   BigInt            @id @default(autoincrement())
  expired_at           DateTime
  status_subscription  expired_status
  user_id              BigInt            @unique
  user                 user              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  payment              payment[]
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt

  @@index([id, user_id, created_at])
}

enum payment_status {
  PENDING
  SUCCESS
  FAILED
}

model payment {
  id              BigInt          @id @default(autoincrement())
  payment_bank    String          @db.VarChar(50)
  payment_amount  Int             @db.Integer
  payment_date    DateTime?
  status_payment  payment_status?
  subscription_id BigInt?
  subscription    subscription?   @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
  payment_method_id String?
  payment_request_id String?
  virtual_account    String?
  limit_payment_date DateTime?
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  @@index([id, subscription_id, created_at])
}
